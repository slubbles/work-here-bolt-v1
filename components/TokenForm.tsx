'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { useWallet } from '@solana/wallet-adapter-react';
import { useAlgorandWallet } from '@/components/providers/AlgorandWalletProvider';
import { 
  Upload, 
  Rocket, 
  Settings, 
  Globe, 
  Github, 
  Twitter, 
  AlertCircle, 
  CheckCircle, 
  Loader2,
  Network,
  Zap,
  Shield,
  Clock,
  Send,
  CheckCircle2
} from 'lucide-react';
import { createAlgorandToken } from '@/lib/algorand';
import { createTokenOnChain } from '@/lib/solana';
import { supabaseHelpers } from '@/lib/supabase';

interface TokenFormProps {
  tokenData: {
    name: string;
    symbol: string;
    description: string;
    totalSupply: string;
    decimals: string;
    logoUrl: string;
    website: string;
    github: string;
    twitter: string;
    mintable: boolean;
    burnable: boolean;
    pausable: boolean;
    network: string;
  };
  setTokenData: (data: any) => void;
}

interface DeploymentStep {
  id: string;
  title: string;
  description: string;
  progress: number;
}

export default function TokenForm({ tokenData, setTokenData }: TokenFormProps) {
  const { toast } = useToast();
  
  // Wallet connections
  const { connected: solanaConnected, publicKey: solanaPublicKey } = useWallet();
  const { connected: algorandConnected, address: algorandAddress, signTransaction } = useAlgorandWallet();

  // Validation states
  const [nameError, setNameError] = useState('');
  const [symbolError, setSymbolError] = useState('');
  const [totalSupplyError, setTotalSupplyError] = useState('');
  const [decimalsError, setDecimalsError] = useState('');
  const [logoError, setLogoError] = useState('');
  const [isFormValid, setIsFormValid] = useState(false);

  // Deployment state
  const [isDeploying, setIsDeploying] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [deploymentProgress, setDeploymentProgress] = useState(0);
  const [deploymentStep, setDeploymentStep] = useState('');
  const [currentStepIndex, setCurrentStepIndex] = useState(0);

  // Smart defaults state
  const [autoGeneratedSymbol, setAutoGeneratedSymbol] = useState('');
  const [symbolWasAutoGenerated, setSymbolWasAutoGenerated] = useState(true);

  // Define deployment steps
  const deploymentSteps: DeploymentStep[] = [
    {
      id: 'preparing',
      title: 'Preparing Transaction',
      description: 'Validating parameters and preparing token creation transaction...',
      progress: 10
    },
    {
      id: 'metadata',
      title: 'Uploading Metadata',
      description: 'Uploading token metadata and logo to decentralized storage...',
      progress: 25
    },
    {
      id: 'building',
      title: 'Building Transaction',
      description: 'Constructing blockchain transaction with token parameters...',
      progress: 40
    },
    {
      id: 'signing',
      title: 'Signing Transaction',
      description: 'Waiting for wallet signature confirmation...',
      progress: 55
    },
    {
      id: 'broadcasting',
      title: 'Broadcasting to Network',
      description: 'Sending signed transaction to blockchain network...',
      progress: 70
    },
    {
      id: 'confirming',
      title: 'Waiting for Confirmation',
      description: 'Waiting for network confirmation and token creation...',
      progress: 85
    },
    {
      id: 'finalizing',
      title: 'Finalizing',
      description: 'Retrieving token details and completing deployment...',
      progress: 95
    },
    {
      id: 'complete',
      title: 'Deployment Complete',
      description: 'Token successfully created and deployed!',
      progress: 100
    }
  ];

  // Progress update function
  const updateProgress = (stepId: string, customDescription?: string) => {
    const step = deploymentSteps.find(s => s.id === stepId);
    if (step) {
      const stepIndex = deploymentSteps.findIndex(s => s.id === stepId);
      setCurrentStepIndex(stepIndex);
      setDeploymentStep(customDescription || step.description);
      setDeploymentProgress(step.progress);
      
      // Add a small delay to make progress feel natural
      return new Promise(resolve => setTimeout(resolve, 800));
    }
    return Promise.resolve();
  };

  // Validation functions
  const validateName = (value: string): string => {
    if (!value.trim()) return 'Token name is required';
    if (value.length < 2) return 'Token name must be at least 2 characters';
    if (value.length > 32) return 'Token name must be 32 characters or less';
    if (!/^[a-zA-Z0-9\s\-_]+$/.test(value)) return 'Token name can only contain letters, numbers, spaces, hyphens, and underscores';
    return '';
  };

  const validateSymbol = (value: string): string => {
    if (!value.trim()) return 'Token symbol is required';
    if (value.length < 2) return 'Symbol must be at least 2 characters';
    if (value.length > 10) return 'Symbol must be 10 characters or less';
    if (!/^[A-Z0-9]+$/.test(value.toUpperCase())) return 'Symbol can only contain letters and numbers';
    return '';
  };

  const validateTotalSupply = (value: string): string => {
    if (!value.trim()) return 'Total supply is required';
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return 'Total supply must be a valid number';
    if (numValue <= 0) return 'Total supply must be greater than 0';
    if (numValue > 1000000000000) return 'Total supply is too large';
    if (!/^\d+(\.\d+)?$/.test(value)) return 'Total supply must be a positive number';
    return '';
  };

  const validateDecimals = (value: string): string => {
    if (!value.trim()) return 'Decimals value is required';
    const numValue = parseInt(value);
    if (isNaN(numValue)) return 'Decimals must be a valid number';
    if (numValue < 0) return 'Decimals cannot be negative';
    if (numValue > 18) return 'Decimals cannot exceed 18';
    return '';
  };

  const validateLogoUrl = (value: string): string => {
    if (value && value.trim()) {
      try {
        new URL(value);
        if (!value.match(/\.(jpg|jpeg|png|gif|svg|webp)$/i)) {
          return 'Logo URL must point to an image file (jpg, png, gif, svg, webp)';
        }
      } catch {
        return 'Please enter a valid URL';
      }
    }
    return '';
  };

  // Generate symbol from token name
  const generateSymbolFromName = (name: string): string => {
    if (!name.trim()) return '';
    
    // Split by spaces and take first letter of each word, max 4 letters
    const words = name.trim().split(/\s+/);
    let symbol = '';
    
    if (words.length === 1) {
      // Single word - take first 3-4 characters
      symbol = words[0].substring(0, 4).toUpperCase();
    } else if (words.length === 2) {
      // Two words - take first 2 letters of each
      symbol = (words[0].substring(0, 2) + words[1].substring(0, 2)).toUpperCase();
    } else {
      // Multiple words - take first letter of each word, max 4
      symbol = words.slice(0, 4).map(word => word.charAt(0)).join('').toUpperCase();
    }
    
    // Clean up symbol - only letters and numbers
    symbol = symbol.replace(/[^A-Z0-9]/g, '');
    
    return symbol.substring(0, 10); // Max 10 characters for symbol
  };

  // Auto-generate symbol from name
  useEffect(() => {
    if (tokenData.name && (symbolWasAutoGenerated || !tokenData.symbol)) {
      const newSymbol = generateSymbolFromName(tokenData.name);
      setAutoGeneratedSymbol(newSymbol);
      
      // Only update if symbol field is empty or was previously auto-generated
      if (!tokenData.symbol || tokenData.symbol === autoGeneratedSymbol || symbolWasAutoGenerated) {
        setTokenData(prev => ({ ...prev, symbol: newSymbol }));
        setSymbolWasAutoGenerated(true);
        setSymbolError(validateSymbol(newSymbol));
      }
    }
  }, [tokenData.name]);

  // Handle input changes with validation
  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTokenData({ ...tokenData, name: value });
    setNameError(validateName(value));
  };

  const handleSymbolChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.toUpperCase();
    setTokenData({ ...tokenData, symbol: value });
    setSymbolError(validateSymbol(value));
    
    // Mark symbol as manually edited if user types something different
    if (value !== autoGeneratedSymbol) {
      setSymbolWasAutoGenerated(false);
    }
  };

  const handleTotalSupplyChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTokenData({ ...tokenData, totalSupply: value });
    setTotalSupplyError(validateTotalSupply(value));
  };

  const handleDecimalsChange = (value: string) => {
    setTokenData({ ...tokenData, decimals: value });
    setDecimalsError(validateDecimals(value));
  };

  const handleLogoUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setTokenData({ ...tokenData, logoUrl: value });
    setLogoError(validateLogoUrl(value));
  };

  // File upload handler
  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith('image/')) {
      toast({
        title: "Invalid File Type",
        description: "Please select an image file (PNG, JPG, GIF, SVG, WebP)",
        variant: "destructive",
      });
      return;
    }

    // Validate file size (5MB max)
    if (file.size > 5 * 1024 * 1024) {
      toast({
        title: "File Too Large",
        description: "Please select an image smaller than 5MB",
        variant: "destructive",
      });
      return;
    }

    setIsUploading(true);
    toast({
      title: "Uploading Logo",
      description: "Please wait while we upload your logo...",
    });

    try {
      const uploadResult = await supabaseHelpers.uploadFileToStorage(file, 'token-assets');
      
      if (uploadResult.success && uploadResult.url) {
        setTokenData({ ...tokenData, logoUrl: uploadResult.url });
        setLogoError('');
        toast({
          title: "Upload Successful",
          description: "Your logo has been uploaded successfully!",
        });
      } else {
        throw new Error(uploadResult.error || 'Upload failed');
      }
    } catch (error) {
      console.error('Logo upload error:', error);
      toast({
        title: "Upload Failed",
        description: "Failed to upload logo. Please try again or enter a URL manually.",
        variant: "destructive",
      });
    } finally {
      setIsUploading(false);
    }
  };

  // Check form validity
  useEffect(() => {
    const hasValidName = !nameError && tokenData.name.trim();
    const hasValidSymbol = !symbolError && tokenData.symbol.trim();
    const hasValidSupply = !totalSupplyError && tokenData.totalSupply.trim();
    const hasValidDecimals = !decimalsError && tokenData.decimals.trim();
    const hasValidLogo = !logoError;
    
    setIsFormValid(hasValidName && hasValidSymbol && hasValidSupply && hasValidDecimals && hasValidLogo);
  }, [nameError, symbolError, totalSupplyError, decimalsError, logoError, tokenData]);

  // Get connected wallet info
  const getConnectedWallet = () => {
    if (tokenData.network.startsWith('algorand') && algorandConnected) {
      return { type: 'algorand', address: algorandAddress };
    }
    if (tokenData.network.startsWith('solana') && solanaConnected) {
      return { type: 'solana', address: solanaPublicKey?.toString() };
    }
    return null;
  };

  // Handle token deployment with enhanced progress tracking
  const handleDeploy = async () => {
    // Check wallet connection
    const wallet = getConnectedWallet();
    if (!wallet) {
      toast({
        title: "❌ Wallet Not Connected",
        description: `To deploy your token, you need to connect your ${tokenData.network.startsWith('algorand') ? 'Algorand' : 'Solana'} wallet first. Click the "Connect Wallet" button in the top right corner.`,
        variant: "destructive",
        duration: 6000,
      });
      return;
    }

    // Final validation check
    if (!isFormValid) {
      toast({
        title: "❌ Form Validation Failed",
        description: "Please review and fix all highlighted validation errors below before deploying your token. Check the red error messages under each field.",
        variant: "destructive",
        duration: 5000,
      });
      return;
    }

    setIsDeploying(true);
    setDeploymentProgress(0);
    setCurrentStepIndex(0);
    
    toast({
      title: "Starting Deployment",
      description: `Deploying ${tokenData.name} token on ${tokenData.network}...`,
    });

    try {
      // Step 1: Preparing transaction
      await updateProgress('preparing');

      // Step 2: Upload metadata if needed
      await updateProgress('metadata');
      
      // Step 3: Building transaction
      await updateProgress('building');

      let result;

      if (tokenData.network.startsWith('algorand')) {
        // Step 4: Signing transaction
        await updateProgress('signing', 'Please check your Algorand wallet and approve the transaction...');
        
        // Step 5: Broadcasting
        await updateProgress('broadcasting', 'Sending transaction to Algorand network...');
        
        // Step 6: Confirming
        await updateProgress('confirming', 'Waiting for Algorand network confirmation...');

        // Algorand deployment
        result = await createAlgorandToken(
          algorandAddress!,
          {
            name: tokenData.name,
            symbol: tokenData.symbol,
            description: tokenData.description,
            decimals: parseInt(tokenData.decimals),
            totalSupply: tokenData.totalSupply,
            logoUrl: tokenData.logoUrl,
            website: tokenData.website,
            github: tokenData.github,
            twitter: tokenData.twitter,
            mintable: tokenData.mintable,
            burnable: tokenData.burnable,
            pausable: tokenData.pausable,
          },
          signTransaction,
          supabaseHelpers.uploadMetadataToStorage,
          tokenData.network
        );
      } else {
        // Step 4: Signing transaction
        await updateProgress('signing', 'Please check your Solana wallet and approve the transaction...');
        
        // Step 5: Broadcasting
        await updateProgress('broadcasting', 'Sending transaction to Solana network...');
        
        // Step 6: Confirming
        await updateProgress('confirming', 'Waiting for Solana network confirmation...');

        // Solana deployment
        result = await createTokenOnChain(
          { publicKey: solanaPublicKey },
          {
            name: tokenData.name,
            symbol: tokenData.symbol,
            description: tokenData.description,
            decimals: parseInt(tokenData.decimals),
            totalSupply: parseFloat(tokenData.totalSupply),
            logoUrl: tokenData.logoUrl,
            website: tokenData.website,
            github: tokenData.github,
            twitter: tokenData.twitter,
            mintable: tokenData.mintable,
            burnable: tokenData.burnable,
            pausable: tokenData.pausable,
          }
        );
      }

      if (result.success) {
        // Step 7: Finalizing
        await updateProgress('finalizing', 'Saving token details and completing deployment...');

        // Save to user history if possible
        try {
          await supabaseHelpers.saveTokenCreation({
            user_id: wallet.address,
            token_name: tokenData.name,
            token_symbol: tokenData.symbol,
            network: tokenData.network,
            contract_address: result.assetId?.toString() || result.tokenAddress || result.mintAddress || '',
            description: tokenData.description,
            total_supply: parseFloat(tokenData.totalSupply),
            decimals: parseInt(tokenData.decimals),
            logo_url: tokenData.logoUrl,
            website: tokenData.website,
            github: tokenData.github,
            twitter: tokenData.twitter,
            mintable: tokenData.mintable,
            burnable: tokenData.burnable,
            pausable: tokenData.pausable,
            transaction_hash: result.transactionId || result.signature,
          });
        } catch (saveError) {
          console.warn('Could not save to user history:', saveError);
        }

        // Step 8: Complete
        await updateProgress('complete');

        toast({
          title: "🎉 Token Deployed Successfully!",
          description: `${tokenData.name} (${tokenData.symbol}) is now live on ${tokenData.network}! You can view it on the blockchain explorer.`,
          duration: 8000,
        });

        // Reset form after a short delay
        setTimeout(() => {
          setTokenData({
            name: '',
            symbol: '',
            description: '',
            totalSupply: '1000000',
            decimals: '9',
            logoUrl: '',
            website: '',
            github: '',
            twitter: '',
            mintable: true,
            burnable: false,
            pausable: false,
            network: tokenData.network,
          });
          setDeploymentProgress(0);
          setDeploymentStep('');
          setCurrentStepIndex(0);
        }, 3000);

      } else {
        throw new Error(result.error || 'Deployment failed');
      }

    } catch (error) {
      console.error('Deployment error:', error);
      
      let errorTitle = '❌ Deployment Failed';
      let errorMessage = 'An unexpected error occurred during deployment.';
      let actionableSteps: string[] = [];
      
      if (error instanceof Error) {
        const message = error.message.toLowerCase();
        
        // Network-specific errors
        if (message.includes('insufficient funds') || message.includes('insufficient balance')) {
          errorTitle = '💰 Insufficient Funds';
          errorMessage = `You don't have enough ${tokenData.network.startsWith('algorand') ? 'ALGO' : 'SOL'} to pay for transaction fees.`;
          actionableSteps = [
            `Add ${tokenData.network.startsWith('algorand') ? 'ALGO' : 'SOL'} to your wallet`,
            'Transaction fees are typically very low (under $0.01 for Algorand, $2-5 for Solana)',
            'Try again once you have sufficient balance'
          ];
        } else if (message.includes('user rejected') || message.includes('cancelled') || message.includes('denied')) {
          errorTitle = '🚫 Transaction Cancelled';
          errorMessage = 'You cancelled the transaction in your wallet.';
          actionableSteps = [
            'Click "Deploy Token" again to retry',
            'Approve the transaction when prompted in your wallet',
            'Make sure you trust this transaction before approving'
          ];
        } else if (message.includes('network') || message.includes('connection')) {
          errorTitle = '🌐 Network Connection Error';
          errorMessage = `Failed to connect to the ${tokenData.network} network.`;
          actionableSteps = [
            'Check your internet connection',
            'Try switching to a different RPC endpoint if available',
            'Wait a moment and try again - networks can be temporarily busy'
          ];
        } else if (message.includes('timeout')) {
          errorTitle = '⏱️ Transaction Timeout';
          errorMessage = 'The transaction took too long to complete.';
          actionableSteps = [
            'The network may be congested - try again in a few minutes',
            'Your transaction might still be processing - check your wallet',
            'If the token was created, check the blockchain explorer'
          ];
        } else if (message.includes('insufficient funds')) {
          errorTitle = '💰 Insufficient Balance';
          errorMessage = `Not enough ${tokenData.network.startsWith('algorand') ? 'ALGO' : 'SOL'} for transaction fees.`;
          actionableSteps = [
            'Add funds to your wallet',
            'Transaction fees are minimal but required',
            'Try again once your balance is sufficient'
          ];
        } else if (message.includes('already initialized') || message.includes('already exists')) {
          errorTitle = '⚠️ Already Exists';
          errorMessage = 'A token with similar parameters may already exist.';
          actionableSteps = [
            'Try using a different token name or symbol',
            'Check if you already created this token',
            'Modify your token parameters and try again'
          ];
        } else if (message.includes('unauthorized') || message.includes('access denied')) {
          errorTitle = '🔒 Unauthorized Access';
          errorMessage = 'Your wallet doesn\'t have permission for this action.';
          actionableSteps = [
            'Make sure you\'re using the correct wallet',
            'Contact support if you believe this is an error',
            'Try connecting a different wallet'
          ];
        } else {
          errorMessage = `Error: ${error.message}`;
          actionableSteps = [
            'Try deploying your token again',
            'Check that all form fields are filled correctly',
            'Contact support if the problem persists'
          ];
        }
      } else {
        actionableSteps = [
          'Refresh the page and try again',
          'Check that your wallet is properly connected',
          'Contact support if the issue continues'
        ];
      }
      
      // Reset progress on error
      setDeploymentProgress(0);
      setDeploymentStep('');
      setCurrentStepIndex(0);

      toast({
        title: errorTitle,
        description: actionableSteps.length > 0 
          ? `${errorMessage}\n\nNext steps:\n${actionableSteps.map((step, i) => `${i + 1}. ${step}`).join('\n')}`
          : errorMessage,
        variant: "destructive",
        duration: 10000,
      });

      // Show additional help if it's a common error
      if (actionableSteps.length > 0) {
        setTimeout(() => {
          console.log('💡 Deployment Help:', { errorTitle, errorMessage, actionableSteps });
        }, 1000);
      }
    } finally {
      setIsDeploying(false);
    }
  };

  const networks = [
    {
      value: 'algorand-testnet',
      label: 'Algorand Testnet',
      badge: 'FREE',
      cost: '~$0.001',
      available: true,
      color: 'bg-[#76f935]/20 text-[#76f935] border-[#76f935]/30'
    },
    {
      value: 'algorand-mainnet',
      label: 'Algorand Mainnet',
      badge: 'PROD',
      cost: '~$0.002',
      available: true,
      color: 'bg-[#00d4aa]/20 text-[#00d4aa] border-[#00d4aa]/30'
    },
    {
      value: 'solana-devnet',
      label: 'Solana Devnet',
      badge: 'FREE',
      cost: '~$2-5',
      available: false,
      color: 'bg-blue-500/20 text-blue-400 border-blue-500/30'
    },
    {
      value: 'solana-mainnet',
      label: 'Solana Mainnet',
      badge: 'PROD',
      cost: '~$2-5',
      available: false,
      color: 'bg-green-500/20 text-green-400 border-green-500/30'
    }
  ];

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center space-x-2">
          <Rocket className="w-6 h-6 text-red-500" />
          <h1 className="text-4xl font-bold text-foreground">Create Your Token</h1>
          <Rocket className="w-6 h-6 text-red-500" />
        </div>
        <p className="text-muted-foreground text-xl">
          Launch your cryptocurrency token in under 30 seconds
        </p>
      </div>

      {/* Deployment Progress Indicator */}
      {isDeploying && (
        <Card className="glass-card border-red-500/50 bg-red-500/5">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Loader2 className="w-5 h-5 text-red-500 animate-spin" />
              <span>Deploying Your Token</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Progress Bar */}
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Progress</span>
                <span className="text-foreground font-semibold">{deploymentProgress}%</span>
              </div>
              <Progress value={deploymentProgress} className="h-3" />
            </div>

            {/* Current Step */}
            <div className="space-y-3">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 rounded-full bg-red-500 flex items-center justify-center">
                  {deploymentProgress === 100 ? (
                    <CheckCircle2 className="w-4 h-4 text-white" />
                  ) : (
                    <Clock className="w-4 h-4 text-white" />
                  )}
                </div>
                <div>
                  <h4 className="font-semibold text-foreground">
                    {deploymentSteps[currentStepIndex]?.title || 'Processing...'}
                  </h4>
                  <p className="text-sm text-muted-foreground">
                    {deploymentStep}
                  </p>
                </div>
              </div>
            </div>

            {/* Steps Overview */}
            <div className="space-y-2">
              <p className="text-sm font-medium text-muted-foreground">Deployment Steps:</p>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                {deploymentSteps.slice(0, -1).map((step, index) => (
                  <div 
                    key={step.id} 
                    className={`flex items-center space-x-2 text-xs p-2 rounded ${
                      index < currentStepIndex 
                        ? 'bg-green-500/20 text-green-400' 
                        : index === currentStepIndex
                        ? 'bg-red-500/20 text-red-400'
                        : 'bg-muted/50 text-muted-foreground'
                    }`}
                  >
                    {index < currentStepIndex ? (
                      <CheckCircle className="w-3 h-3" />
                    ) : index === currentStepIndex ? (
                      <Loader2 className="w-3 h-3 animate-spin" />
                    ) : (
                      <Clock className="w-3 h-3" />
                    )}
                    <span>{step.title}</span>
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Network Selection */}
      <Card className="glass-card">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Network className="w-5 h-5 text-red-500" />
            <span>Select Blockchain Network</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            {networks.map((network) => (
              <div
                key={network.value}
                className={`network-card ${
                  tokenData.network === network.value ? 'active' : ''
                } ${network.available ? 'available' : 'disabled'}`}
                onClick={() => network.available && setTokenData({ ...tokenData, network: network.value })}
              >
                <div className="flex items-center justify-between mb-3">
                  <h3 className="font-semibold text-foreground">{network.label}</h3>
                  <Badge className={network.color}>
                    {network.badge}
                  </Badge>
                </div>
                <p className="text-sm text-muted-foreground mb-2">
                  Deployment cost: {network.cost}
                </p>
                {!network.available && (
                  <Badge className="coming-soon-badge">
                    Coming Soon
                  </Badge>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Token Information */}
      <Card className="glass-card">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Settings className="w-5 h-5 text-red-500" />
            <span>Token Information</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="form-section">
          <div className="form-group">
            <div className="space-y-2">
              <Label htmlFor="name" className="form-label">Token Name *</Label>
              <Input
                id="name"
                placeholder="e.g., My Awesome Token"
                value={tokenData.name}
                onChange={handleNameChange}
                className={`form-input touch-target ${nameError ? 'border-red-500' : ''}`}
                disabled={isDeploying}
              />
              {nameError && (
                <div className="flex items-center space-x-1 text-red-500 text-sm">
                  <AlertCircle className="w-4 h-4" />
                  <span>{nameError}</span>
                </div>
              )}
              {!nameError && tokenData.name && (
                <div className="flex items-center space-x-1 text-green-500 text-sm">
                  <CheckCircle className="w-4 h-4" />
                  <span>Valid token name</span>
                </div>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="symbol" className="form-label">Token Symbol *</Label>
              <div className="relative">
              <Input
                id="symbol"
                placeholder="e.g., MAT"
                value={tokenData.symbol}
                onChange={handleSymbolChange}
                className={`form-input touch-target ${symbolError ? 'border-red-500' : ''}`}
                maxLength={10}
                disabled={isDeploying}
              />
                {symbolWasAutoGenerated && tokenData.symbol && (
                  <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                    <div className="flex items-center space-x-1 text-xs text-blue-500">
                      <span className="w-1.5 h-1.5 bg-blue-500 rounded-full animate-pulse"></span>
                      <span>Auto</span>
                    </div>
                  </div>
                )}
              </div>
              {symbolWasAutoGenerated && tokenData.symbol && (
                <p className="text-xs text-blue-600">
                  Symbol auto-generated from name. You can edit it manually.
                </p>
              )}
              {symbolError && (
                <div className="flex items-center space-x-1 text-red-500 text-sm">
                  <AlertCircle className="w-4 h-4" />
                  <span>{symbolError}</span>
                </div>
              )}
              {!symbolError && tokenData.symbol && (
                <div className="flex items-center space-x-1 text-green-500 text-sm">
                  <CheckCircle className="w-4 h-4" />
                  <span>Valid symbol</span>
                </div>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="totalSupply" className="form-label">Total Supply *</Label>
                <div className="relative">
                <Input
                  id="totalSupply"
                  type="number"
                  placeholder="1000000"
                  value={tokenData.totalSupply}
                  onChange={handleTotalSupplyChange}
                  className={`form-input touch-target ${totalSupplyError ? 'border-red-500' : ''}`}
                  disabled={isDeploying}
                />
                  {!tokenData.description && (
                    <div className="absolute top-3 left-3 pointer-events-none text-xs text-muted-foreground bg-background px-1 rounded">
                      💡 Tip: A clear description helps users understand your token's purpose
                    </div>
                  )}
                </div>
                {totalSupplyError && (
                  <div className="flex items-center space-x-1 text-red-500 text-sm">
                    <AlertCircle className="w-4 h-4" />
                    <span>{totalSupplyError}</span>
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="decimals" className="form-label">Decimals *</Label>
                <Select value={tokenData.decimals} onValueChange={handleDecimalsChange} disabled={isDeploying}>
                  <SelectTrigger className={`form-input touch-target ${decimalsError ? 'border-red-500' : ''}`}>
                    <SelectValue placeholder="Select decimals" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="0">0 - No decimals</SelectItem>
                    <SelectItem value="6">6 - Standard</SelectItem>
                    <SelectItem value="9">9 - High precision (Recommended)</SelectItem>
                    <SelectItem value="18">18 - Maximum</SelectItem>
                  </SelectContent>
                </Select>
                <p className="text-xs text-muted-foreground">
                  Recommended: 9 decimals for most tokens, 6 for stablecoins
                </p>
                {decimalsError && (
                  <div className="flex items-center space-x-1 text-red-500 text-sm">
                    <AlertCircle className="w-4 h-4" />
                    <span>{decimalsError}</span>
                  </div>
                )}
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description" className="form-label">Description</Label>
              <Textarea
                id="description"
                placeholder="Describe your token's purpose and utility..."
                value={tokenData.description}
                onChange={(e) => setTokenData({ ...tokenData, description: e.target.value })}
                className="form-textarea touch-target"
                maxLength={200}
                disabled={isDeploying}
              />
              <p className="text-xs text-muted-foreground">
                {tokenData.description.length}/200 characters
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Logo Upload */}
      <Card className="glass-card">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Upload className="w-5 h-5 text-red-500" />
            <span>Token Logo</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="logoFile" className="form-label">Upload Logo</Label>
            <div className="flex items-center space-x-4">
              <Input
                id="logoFile"
                type="file"
                accept="image/*"
                onChange={handleFileUpload}
                className="form-input touch-target"
                disabled={isUploading || isDeploying}
              />
              {isUploading && <Loader2 className="w-4 h-4 animate-spin text-red-500" />}
            </div>
            <p className="text-xs text-muted-foreground">
              Upload PNG, JPG, GIF, SVG, or WebP. Max 5MB.
            </p>
          </div>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t border-border" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">Or</span>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="logoUrl" className="form-label">Logo URL</Label>
            <Input
              id="logoUrl"
              type="url"
              placeholder="https://example.com/logo.png"
              value={tokenData.logoUrl}
              onChange={handleLogoUrlChange}
              className={`form-input touch-target ${logoError ? 'border-red-500' : ''}`}
              disabled={isDeploying}
            />
            {logoError && (
              <div className="flex items-center space-x-1 text-red-500 text-sm">
                <AlertCircle className="w-4 h-4" />
                <span>{logoError}</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Social Links */}
      <Card className="glass-card">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Globe className="w-5 h-5 text-red-500" />
            <span>Social Links</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="form-group">
          <div className="space-y-2">
            <Label htmlFor="website" className="form-label flex items-center space-x-2">
              <Globe className="w-4 h-4" />
              <span>Website</span>
              <span className="text-xs text-muted-foreground">(Optional)</span>
            </Label>
            <Input
              id="website"
              type="url"
              placeholder="https://yourproject.com"
              value={tokenData.website}
              onChange={(e) => setTokenData({ ...tokenData, website: e.target.value })}
              className="form-input touch-target"
              disabled={isDeploying}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="github" className="form-label flex items-center space-x-2">
              <Github className="w-4 h-4" />
              <span>GitHub</span>
              <span className="text-xs text-muted-foreground">(Optional)</span>
            </Label>
            <Input
              id="github"
              type="url"
              placeholder="https://github.com/yourproject"
              value={tokenData.github}
              onChange={(e) => setTokenData({ ...tokenData, github: e.target.value })}
              className="form-input touch-target"
              disabled={isDeploying}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="twitter" className="form-label flex items-center space-x-2">
              <Twitter className="w-4 h-4" />
              <span>Twitter</span>
              <span className="text-xs text-muted-foreground">(Optional)</span>
            </Label>
            <Input
              id="twitter"
              type="url"
              placeholder="https://twitter.com/yourproject"
              value={tokenData.twitter}
              onChange={(e) => setTokenData({ ...tokenData, twitter: e.target.value })}
              className="form-input touch-target"
              disabled={isDeploying}
            />
          </div>
        </CardContent>
      </Card>

      {/* Token Features */}
      <Card className="glass-card mobile-friendly-spacing">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Shield className="w-5 h-5 text-red-500" />
            <span>Token Features</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-8 md:space-y-6">
          <div className="flex items-center justify-between p-6 md:p-4 bg-muted/30 rounded-lg min-h-[80px] md:min-h-[60px]">
            <div>
              <h4 className="font-semibold text-foreground text-lg md:text-base">Mintable</h4>
              <p className="text-base md:text-sm text-muted-foreground">Allow creating new tokens after deployment</p>
            </div>
            <div className="ml-4">
              <Switch
              checked={tokenData.mintable}
              onCheckedChange={(checked) => setTokenData({ ...tokenData, mintable: checked })}
              disabled={isDeploying}
              className="touch-target-switch"
              />
            </div>
          </div>

          <div className="flex items-center justify-between p-6 md:p-4 bg-muted/30 rounded-lg min-h-[80px] md:min-h-[60px]">
            <div>
              <h4 className="font-semibold text-foreground text-lg md:text-base">Burnable</h4>
              <p className="text-base md:text-sm text-muted-foreground">Allow permanently destroying tokens</p>
            </div>
            <div className="ml-4">
              <Switch
              checked={tokenData.burnable}
              onCheckedChange={(checked) => setTokenData({ ...tokenData, burnable: checked })}
              disabled={isDeploying}
              className="touch-target-switch"
              />
            </div>
          </div>

          <div className="flex items-center justify-between p-6 md:p-4 bg-muted/30 rounded-lg min-h-[80px] md:min-h-[60px]">
            <div>
              <h4 className="font-semibold text-foreground text-lg md:text-base">Pausable</h4>
              <p className="text-base md:text-sm text-muted-foreground">Allow pausing all token transfers</p>
            </div>
            <div className="ml-4">
              <Switch
              checked={tokenData.pausable}
              onCheckedChange={(checked) => setTokenData({ ...tokenData, pausable: checked })}
              disabled={isDeploying}
              className="touch-target-switch"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Deploy Button */}
      <div className="text-center pt-8 pb-8 md:pb-4">
        <Button
          size="lg" 
          onClick={handleDeploy}
          disabled={!isFormValid || isDeploying}
          className="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white px-12 py-4 md:py-4 py-6 text-xl md:text-lg font-bold rounded-xl shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none min-h-[64px] md:min-h-[56px] w-full md:w-auto"
        >
          {isDeploying ? (
            <>
              <Loader2 className="w-5 h-5 mr-2 animate-spin" />
              Deploying Token...
            </>
          ) : (
            <>
              <Zap className="w-5 h-5 mr-2" />
              Deploy Token
            </>
          )}
        </Button>
        
        {!isFormValid && !isDeploying && (
          <p className="text-base md:text-sm text-muted-foreground mt-4 md:mt-3 px-4 md:px-0">
            ⚠️ Please fix the highlighted validation errors above to enable deployment
          </p>
        )}
        
        {!getConnectedWallet() && !isDeploying && (
          <div className="mt-4 md:mt-3 p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-lg">
            <p className="text-yellow-700 font-semibold text-center mb-2">
              🔗 Wallet Connection Required
            </p>
            <p className="text-base md:text-sm text-yellow-600 mt-4 md:mt-3 px-4 md:px-0">
              To deploy your token, connect your {tokenData.network.startsWith('algorand') ? 'Algorand (Pera Wallet)' : 'Solana (Phantom, Solflare, etc.)'} wallet using the button in the top-right corner.
            </p>
          </div>
        )}

        {/* Additional Help */}
        {(!isFormValid || !getConnectedWallet()) && !isDeploying && (
          <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg">
            <p className="text-blue-700 font-semibold text-center mb-2">
              💡 Need Help?
            </p>
            <div className="text-sm text-blue-600 space-y-1">
              <p>• Make sure all required fields (*) are filled out correctly</p>
              <p>• Token symbols should be 2-10 characters, letters and numbers only</p>
              <p>• Connect your wallet before attempting to deploy</p>
              <p>• Ensure you have enough balance for transaction fees</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}